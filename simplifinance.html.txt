<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simplifinance - Mockup</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script type="module">
        // Firebase SDK imports
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { 
            getAuth, 
            createUserWithEmailAndPassword, 
            signInWithEmailAndPassword, 
            signOut, 
            onAuthStateChanged,
            signInAnonymously,
            signInWithCustomToken
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore, 
            doc, 
            setDoc, 
            getDoc,
            collection,
            addDoc,
            onSnapshot,
            query,
            where,
            Timestamp
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- Firebase Configuration ---
        // IMPORTANT: Replace with your actual Firebase config object
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {
            apiKey: "YOUR_API_KEY", // Replace if not using __firebase_config
            authDomain: "YOUR_AUTH_DOMAIN",
            projectId: "YOUR_PROJECT_ID",
            storageBucket: "YOUR_STORAGE_BUCKET",
            messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
            appId: "YOUR_APP_ID"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'simplifinance-mockup';

        // --- Global State & Helper Functions ---
        let currentUserId = null;
        let selectedPlan = null; // To store { name: 'Basic', type: 'monthly', price: '$10' }

        // Function to show/hide page sections
        function showPage(pageId) {
            document.querySelectorAll('.page-section').forEach(section => {
                section.classList.add('hidden');
            });
            const page = document.getElementById(pageId);
            if (page) {
                page.classList.remove('hidden');
            } else {
                console.error("Page not found:", pageId);
                document.getElementById('home-page').classList.remove('hidden'); // Fallback to home
            }
            window.scrollTo(0, 0); // Scroll to top on page change
        }

        // Function to update UI based on auth state
        function updateAuthStateUI(user) {
            const userGreeting = document.getElementById('user-greeting');
            const loginNavItem = document.getElementById('login-nav-item');
            const logoutNavItem = document.getElementById('logout-nav-item');
            const libraryNavItem = document.getElementById('library-nav-item');
            const adminNavItem = document.getElementById('admin-nav-item'); // Assuming admin access is tied to being logged in for now
            const userIdDisplay = document.getElementById('user-id-display');

            if (user) {
                currentUserId = user.uid;
                userGreeting.textContent = `Welcome, ${user.email || 'User'}!`;
                loginNavItem.classList.add('hidden');
                logoutNavItem.classList.remove('hidden');
                libraryNavItem.classList.remove('hidden');
                adminNavItem.classList.remove('hidden');
                if (userIdDisplay) userIdDisplay.textContent = `User ID: ${currentUserId}`;
                // Check subscription status to potentially show library or prompt for subscription
                checkUserSubscription(user.uid);
            } else {
                currentUserId = null;
                userGreeting.textContent = '';
                loginNavItem.classList.remove('hidden');
                logoutNavItem.classList.add('hidden');
                libraryNavItem.classList.add('hidden');
                adminNavItem.classList.add('hidden');
                if (userIdDisplay) userIdDisplay.textContent = 'Not logged in';
                showPage('home-page');
            }
        }
        
        // --- Firestore Helper Functions ---
        async function saveUserSubscription(userId, email, planDetails) {
            if (!userId || !planDetails) {
                console.error("User ID or Plan Details missing for saving subscription.");
                alertModal("Error: Could not save subscription details. Missing information.");
                return;
            }
            try {
                const userDocRef = doc(db, `artifacts/${appId}/users/${userId}/subscriptions`, "current");
                await setDoc(userDocRef, {
                    userId: userId,
                    email: email,
                    planName: planDetails.name,
                    planType: planDetails.type,
                    price: planDetails.price,
                    subscribedOn: Timestamp.now(),
                    status: "active" // Assuming payment is successful
                });
                console.log("Subscription saved for user:", userId);
            } catch (error) {
                console.error("Error saving user subscription: ", error);
                alertModal(`Error saving subscription: ${error.message}`);
            }
        }

        async function checkUserSubscription(userId) {
            if (!userId) return;
            try {
                const subDocRef = doc(db, `artifacts/${appId}/users/${userId}/subscriptions`, "current");
                const docSnap = await getDoc(subDocRef);
                if (docSnap.exists()) {
                    const subData = docSnap.data();
                    console.log("User subscription found:", subData);
                    // Potentially unlock content or show subscription details
                    // For now, just logs. This could be expanded to update the UI.
                    if (document.getElementById('library-page').classList.contains('hidden') && !document.getElementById('signup-billing-page').classList.contains('hidden')) {
                       // If user is on signup page but already subscribed, maybe redirect to library
                    }
                } else {
                    console.log("No active subscription found for user:", userId);
                    // If user is trying to access library page and has no sub, redirect them
                    if (!document.getElementById('library-page').classList.add('hidden') && !document.getElementById('home-page').classList.contains('hidden')) {
                        // showPage('home-page'); // Or direct to plans
                        // alertModal("You don't have an active subscription. Please choose a plan.");
                    }
                }
            } catch (error) {
                console.error("Error checking user subscription:", error);
            }
        }


        // --- Navigation Event Listeners ---
        function setupNavigation() {
            // Corrected IDs for event listeners
            document.getElementById('nav-home').addEventListener('click', (e) => { e.preventDefault(); showPage('home-page'); });
            document.getElementById('login-nav-item').addEventListener('click', (e) => { e.preventDefault(); showPage('login-page'); });
            document.getElementById('library-nav-item').addEventListener('click', (e) => { e.preventDefault(); if(currentUserId) showPage('library-page'); else showPage('login-page');});
            document.getElementById('admin-nav-item').addEventListener('click', (e) => { e.preventDefault(); if(currentUserId) showPage('admin-page'); else showPage('login-page');});
        }

        // --- Page Specific Logic ---

        // Home Page: Subscription Plan Selection
        function setupSubscriptionPlanSelection() {
            document.querySelectorAll('.select-plan-btn').forEach(button => {
                button.addEventListener('click', function() {
                    selectedPlan = {
                        name: this.dataset.planName,
                        type: this.dataset.planType,
                        price: this.dataset.planPrice
                    };
                    console.log("Plan selected:", selectedPlan);
                    
                    // Update the checkout page with plan details
                    const planDetailsCheckout = document.getElementById('plan-details-checkout');
                    if (planDetailsCheckout) {
                        planDetailsCheckout.innerHTML = `
                            <h3 class="text-lg font-semibold">${selectedPlan.name} - ${selectedPlan.type}</h3>
                            <p class="text-xl font-bold">${selectedPlan.price}/${selectedPlan.type === 'Monthly' ? 'month' : 'year'}</p>
                        `;
                    }
                    showPage('signup-billing-page'); 
                });
            });
        }

        // Sign Up & Billing Page
        function setupSignupBillingForm() {
            const signupBillingForm = document.getElementById('signup-billing-form');
            signupBillingForm.addEventListener('submit', async function(event) {
                event.preventDefault();
                if (!selectedPlan) {
                    alertModal("Please select a subscription plan first.");
                    showPage('home-page'); // Go back to select a plan
                    return;
                }

                const email = event.target.email.value;
                const password = event.target.password.value;
                // const cardName = event.target.cardName.value; // Dummy fields for now
                // const cardNumber = event.target.cardNumber.value;
                // const expiryDate = event.target.expiry.value;
                // const cvv = event.target.cvv.value;

                // Simple validation (add more as needed)
                if (!email || !password) {
                    alertModal("Email and Password are required.");
                    return;
                }

                document.getElementById('signup-billing-loader').classList.remove('hidden');
                document.getElementById('signup-billing-submit-btn').disabled = true;


                try {
                    // 1. Create user account
                    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                    const user = userCredential.user;
                    console.log("User created:", user.uid);
                    currentUserId = user.uid; // Set currentUserId immediately

                    // 2. Save subscription details to Firestore
                    // The planDetails (selectedPlan) should already be set when they clicked "Sign Up Now"
                    await saveUserSubscription(user.uid, email, selectedPlan);
                    
                    // 3. "Simulate" billing success
                    console.log("Billing successful (simulated).");

                    alertModal("Account created and subscription activated! Welcome to Simplifinance.", "Success");
                    showPage('library-page'); // Grant access to library

                } catch (error) {
                    console.error("Signup/Billing Error:", error);
                    alertModal(`Error: ${error.message}`);
                } finally {
                    document.getElementById('signup-billing-loader').classList.add('hidden');
                    document.getElementById('signup-billing-submit-btn').disabled = false;
                    signupBillingForm.reset();
                    selectedPlan = null; // Clear selected plan after processing
                }
            });
        }

        // Login Page
        function setupLoginForm() {
            const loginForm = document.getElementById('login-form');
            loginForm.addEventListener('submit', async function(event) {
                event.preventDefault();
                const email = event.target.email.value;
                const password = event.target.password.value;
                
                document.getElementById('login-loader').classList.remove('hidden');
                document.getElementById('login-submit-btn').disabled = true;

                try {
                    const userCredential = await signInWithEmailAndPassword(auth, email, password);
                    console.log("User logged in:", userCredential.user.uid);
                    // onAuthStateChanged will handle UI update and redirect
                    alertModal("Logged in successfully!", "Success");
                    showPage('library-page'); 
                } catch (error) {
                    console.error("Login Error:", error);
                    alertModal(`Login Failed: ${error.message}`);
                } finally {
                    document.getElementById('login-loader').classList.add('hidden');
                    document.getElementById('login-submit-btn').disabled = false;
                }
            });
        }

        // Logout Functionality
        function setupLogoutButton() {
            const logoutButton = document.getElementById('logout-button');
            logoutButton.addEventListener('click', async () => {
                try {
                    await signOut(auth);
                    console.log("User logged out.");
                    selectedPlan = null; // Clear selected plan on logout
                    alertModal("Logged out successfully.", "Success");
                    showPage('home-page'); // Redirect to home after logout
                } catch (error) {
                    console.error("Logout Error:", error);
                    alertModal(`Logout Failed: ${error.message}`);
                }
            });
        }

        // Admin Page: Content Upload (Placeholder)
        function setupAdminContentUploadForm() {
            const adminUploadForm = document.getElementById('admin-upload-form');
            adminUploadForm.addEventListener('submit', async function(event) {
                event.preventDefault();
                const title = event.target.contentTitle.value;
                const description = event.target.contentDescription.value;
                const contentUrl = event.target.contentUrl.value; // e.g., video link or article text
                const accessLevel = event.target.accessLevel.value; // e.g., basic, premium

                if (!title || !description || !contentUrl || !accessLevel) {
                    alertModal("All content fields are required.");
                    return;
                }
                
                document.getElementById('admin-upload-loader').classList.remove('hidden');
                document.getElementById('admin-upload-submit-btn').disabled = true;

                try {
                    // Add content to Firestore 'contentLibrary' collection
                    const contentCollectionRef = collection(db, `artifacts/${appId}/public/data/contentLibrary`);
                    await addDoc(contentCollectionRef, {
                        title: title,
                        description: description,
                        url: contentUrl,
                        accessLevel: accessLevel, // 'basic', 'premium'
                        uploadedBy: currentUserId, // Optional: track who uploaded
                        uploadedAt: Timestamp.now()
                    });
                    alertModal("Content uploaded successfully!", "Success");
                    adminUploadForm.reset();
                    // Optionally, refresh a list of uploaded content if displayed on admin page
                    loadLibraryContent(); // Refresh library content for all users (if applicable)
                } catch (error) {
                    console.error("Content Upload Error:", error);
                    alertModal(`Error uploading content: ${error.message}`);
                } finally {
                    document.getElementById('admin-upload-loader').classList.add('hidden');
                    document.getElementById('admin-upload-submit-btn').disabled = false;
                }
            });
        }
        
        // Library Page: Load Content
        async function loadLibraryContent() {
            const libraryContentDiv = document.getElementById('library-content-list');
            if (!libraryContentDiv) return;
            libraryContentDiv.innerHTML = '<p class="text-gray-500">Loading content...</p>'; // Loading indicator

            if (!currentUserId) {
                libraryContentDiv.innerHTML = '<p class="text-red-500">Please log in to view content.</p>';
                return;
            }
            
            // First, check user's subscription status to determine accessible content
            let userAccessLevel = "none"; // Default to no access
            try {
                const subDocRef = doc(db, `artifacts/${appId}/users/${currentUserId}/subscriptions`, "current");
                const docSnap = await getDoc(subDocRef);
                if (docSnap.exists() && docSnap.data().status === "active") {
                    const subData = docSnap.data();
                    // Simple mapping for demo: basic plan gets 'basic' content, premium gets 'basic' and 'premium'
                    if (subData.planName.toLowerCase().includes("premium")) {
                        userAccessLevel = "premium";
                    } else if (subData.planName.toLowerCase().includes("standard")) { // Corrected this line
                        userAccessLevel = "standard";
                    } else if (subData.planName.toLowerCase().includes("basic")) {
                        userAccessLevel = "basic";
                    }
                     // Add more specific plan name checks if needed, e.g. "Standard Plan" -> "standard"
                    // if (subData.planName === "Basic Plan") userAccessLevel = "basic"; // These are more specific, could be redundant or preferred
                    // if (subData.planName === "Standard Plan") userAccessLevel = "standard";
                    // if (subData.planName === "Premium Plan") userAccessLevel = "premium";

                } else {
                     libraryContentDiv.innerHTML = `
                        <p class="text-center text-red-500">You do not have an active subscription.</p>
                        <button id="go-to-plans-btn" class="mt-4 mx-auto block bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            View Subscription Plans
                        </button>`;
                    document.getElementById('go-to-plans-btn')?.addEventListener('click', () => showPage('home-page'));
                    return;
                }
            } catch (error) {
                console.error("Error fetching user subscription for library access:", error);
                libraryContentDiv.innerHTML = '<p class="text-red-500">Error checking your subscription. Please try again later.</p>';
                return;
            }

            // Fetch content based on user's access level
            try {
                const contentCollectionRef = collection(db, `artifacts/${appId}/public/data/contentLibrary`);
                let contentQuery;
                
                if (userAccessLevel === "premium") {
                    // Premium users get all content
                    contentQuery = query(contentCollectionRef); 
                } else if (userAccessLevel === "standard") {
                    contentQuery = query(contentCollectionRef, where("accessLevel", "in", ["basic", "standard"]));
                } else if (userAccessLevel === "basic") {
                    contentQuery = query(contentCollectionRef, where("accessLevel", "==", "basic"));
                } else {
                    libraryContentDiv.innerHTML = '<p class="text-center text-red-500">Your current plan does not grant access to any library content.</p>';
                    return;
                }


                onSnapshot(contentQuery, (querySnapshot) => {
                    if (querySnapshot.empty) {
                        libraryContentDiv.innerHTML = '<p class="text-gray-500">No content available for your subscription level at the moment. Check back later!</p>';
                        return;
                    }
                    let contentHTML = '';
                    querySnapshot.forEach((doc) => {
                        const content = doc.data();
                        contentHTML += `
                            <div class="bg-white p-6 rounded-lg shadow-lg mb-4">
                                <hh3 class="text-xl font-semibold text-blue-600 mb-2">${content.title}</h3>
                                <p class="text-gray-700 mb-3">${content.description}</p>
                                ${content.url ? `<a href="${content.url}" target="_blank" class="text-blue-500 hover:text-blue-700 hover:underline">Access Content</a>` : ''}
                                <p class="text-sm text-gray-500 mt-2">Access Level: ${content.accessLevel}</p>
                            </div>
                        `;
                    });
                    libraryContentDiv.innerHTML = contentHTML;
                }, (error) => {
                    console.error("Error fetching library content:", error);
                    libraryContentDiv.innerHTML = '<p class="text-red-500">Could not load library content. Please try again later.</p>';
                });

            } catch (error) {
                console.error("Error setting up content query:", error);
                libraryContentDiv.innerHTML = '<p class="text-red-500">There was an issue accessing library content. Please try again.</p>';
            }
        }
        
        // --- Custom Modal for Alerts ---
        function alertModal(message, type = "error") {
            const modal = document.getElementById('alert-modal');
            const modalMessage = document.getElementById('alert-modal-message');
            const modalTitle = document.getElementById('alert-modal-title');
            const modalCloseButton = document.getElementById('alert-modal-close');

            modalMessage.textContent = message;
            if (type === "success") {
                modalTitle.textContent = "Success!";
                modalTitle.className = "text-xl font-bold text-green-600 mb-4";
            } else { // error or info
                modalTitle.textContent = "Alert";
                modalTitle.className = "text-xl font-bold text-red-600 mb-4";
            }
            
            modal.classList.remove('hidden');
            modal.classList.add('flex');

            modalCloseButton.onclick = () => {
                modal.classList.add('hidden');
                modal.classList.remove('flex');
            };
             // Also close if clicking outside the modal content (on the overlay)
            modal.onclick = (event) => {
                if (event.target === modal) { // Check if the click is on the overlay itself
                    modal.classList.add('hidden');
                    modal.classList.remove('flex');
                }
            };
        }


        // --- Initialization ---
        document.addEventListener('DOMContentLoaded', async () => {
            // Firebase Auth State Listener
            onAuthStateChanged(auth, (user) => {
                updateAuthStateUI(user);
                if (user) {
                    console.log("Auth state changed. User:", user.uid);
                    // When user logs in or auth state is confirmed, load library content if they are on that page
                    if (!document.getElementById('library-page').classList.contains('hidden')) {
                        loadLibraryContent();
                    }
                } else {
                    console.log("Auth state changed. No user.");
                    // If user logs out and was on library/admin, redirect to home
                    if (!document.getElementById('library-page').classList.contains('hidden') || !document.getElementById('admin-page').classList.contains('hidden')) {
                        showPage('home-page');
                    }
                }
            });
             // Initial auth check (sign in with token or anonymously)
            try {
                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    console.log("Attempting to sign in with custom token...");
                    await signInWithCustomToken(auth, __initial_auth_token);
                    console.log("Signed in with custom token.");
                } else {
                    console.log("No custom token found, attempting anonymous sign in for initial setup if no user.");
                    if (!auth.currentUser) { // Only sign in anonymously if no user is already signed in
                        await signInAnonymously(auth);
                        console.log("Signed in anonymously for initial session.");
                        // Note: Anonymous users won't persist across sessions easily without custom handling
                        // For this app, we primarily want email/password users, so anonymous is more for initial load.
                        // We might want to sign out anonymous user if they then sign up with email/pass.
                        // `createUserWithEmailAndPassword` handles this by signing in the new user.
                    }
                }
            } catch (error) {
                console.error("Error during initial auth sign-in:", error);
                // Fallback or error message if needed
            }


            setupNavigation();
            setupSubscriptionPlanSelection();
            setupSignupBillingForm();
            setupLoginForm();
            setupLogoutButton();
            setupAdminContentUploadForm();

            // Show home page by default
            showPage('home-page');
            
            // Attach listeners for dynamically shown pages or elements
            // For example, if library content needs to be reloaded when page is shown:
            const observer = new MutationObserver((mutationsList, observer) => {
                for(const mutation of mutationsList) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                        const libraryPage = document.getElementById('library-page');
                        if (libraryPage && !libraryPage.classList.contains('hidden')) {
                            loadLibraryContent();
                        }
                    }
                }
            });
            observer.observe(document.getElementById('library-page'), { attributes: true });
        });

    </script>
    <style>
        body { font-family: 'Inter', sans-serif; }
        .page-section { min-height: calc(100vh - 120px); /* Adjust based on header/footer height */ }
        /* Custom loader style */
        .loader {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            display: inline-block; /* For inline display next to button text */
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <!-- Header / Navigation -->
    <header class="bg-white shadow-md sticky top-0 z-50">
        <nav class="container mx-auto px-6 py-3 flex justify-between items-center">
            <a href="#" id="nav-home" class="text-2xl font-bold text-blue-600">Simplifinance</a>
            <div class="flex items-center space-x-4">
                <span id="user-greeting" class="text-sm text-gray-700"></span>
                <span id="user-id-display" class="text-xs text-gray-500 italic"></span>
                <a href="#" id="login-nav-item" class="px-3 py-2 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-200 hover:text-gray-900">Login</a>
                <a href="#" id="library-nav-item" class="px-3 py-2 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-200 hover:text-gray-900 hidden">Library</a>
                <a href="#" id="admin-nav-item" class="px-3 py-2 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-200 hover:text-gray-900 hidden">Admin</a>
                <div id="logout-nav-item" class="hidden">
                    <button id="logout-button" class="px-3 py-2 rounded-md text-sm font-medium text-white bg-red-500 hover:bg-red-600">Logout</button>
                </div>
            </div>
        </nav>
    </header>

    <!-- Main Content Area -->
    <main class="container mx-auto px-6 py-8">

        <!-- Home Page -->
        <section id="home-page" class="page-section">
            <div class="text-center mb-12">
                <h1 class="text-4xl font-bold text-gray-800 mb-4">Unlock Your Financial Potential</h1>
                <p class="text-lg text-gray-600">Join Simplifinance and gain access to our exclusive educational library.</p>
            </div>

            <h2 class="text-3xl font-semibold text-center text-gray-700 mb-10">Our Subscription Plans</h2>
            <div class="grid md:grid-cols-3 gap-8">
                <!-- Plan 1: Basic -->
                <div class="bg-white p-8 rounded-xl shadow-lg transform hover:scale-105 transition-transform duration-300">
                    <h3 class="text-2xl font-semibold text-blue-600 mb-4">Basic Plan</h3>
                    <p class="text-4xl font-bold text-gray-800 mb-2">$10<span class="text-lg font-normal text-gray-500">/month</span></p>
                    <p class="text-gray-600 mb-6 h-20">Access to fundamental courses and community forum.</p>
                    <ul class="space-y-2 text-gray-700 mb-8">
                        <li class="flex items-center"><svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>Basic financial literacy</li>
                        <li class="flex items-center"><svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>Budgeting tools</li>
                    </ul>
                    <button data-plan-name="Basic Plan" data-plan-type="Monthly" data-plan-price="$10" class="select-plan-btn w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-300">Sign Up Now (Monthly)</button>
                    <button data-plan-name="Basic Plan" data-plan-type="Annual" data-plan-price="$100" class="select-plan-btn w-full mt-2 bg-blue-400 hover:bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-300">Sign Up Now (Annual - Save $20)</button>
                </div>
                <!-- Plan 2: Standard -->
                <div class="bg-white p-8 rounded-xl shadow-lg transform hover:scale-105 transition-transform duration-300 border-4 border-blue-500">
                     <p class="text-xs font-semibold uppercase tracking-wider text-blue-500 bg-blue-100 inline-block px-3 py-1 rounded-full mb-3 -mt-12 relative top-4 left-1/2 transform -translate-x-1/2">Most Popular</p>
                    <h3 class="text-2xl font-semibold text-blue-600 mb-4">Standard Plan</h3>
                    <p class="text-4xl font-bold text-gray-800 mb-2">$20<span class="text-lg font-normal text-gray-500">/month</span></p>
                    <p class="text-gray-600 mb-6 h-20">Everything in Basic, plus investment guides and webinars.</p>
                    <ul class="space-y-2 text-gray-700 mb-8">
                        <li class="flex items-center"><svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>All Basic features</li>
                        <li class="flex items-center"><svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>Investment strategies</li>
                        <li class="flex items-center"><svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>Monthly webinars</li>
                    </ul>
                    <button data-plan-name="Standard Plan" data-plan-type="Monthly" data-plan-price="$20" class="select-plan-btn w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-300">Sign Up Now (Monthly)</button>
                    <button data-plan-name="Standard Plan" data-plan-type="Annual" data-plan-price="$200" class="select-plan-btn w-full mt-2 bg-blue-400 hover:bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-300">Sign Up Now (Annual - Save $40)</button>
                </div>
                <!-- Plan 3: Premium -->
                <div class="bg-white p-8 rounded-xl shadow-lg transform hover:scale-105 transition-transform duration-300">
                    <h3 class="text-2xl font-semibold text-blue-600 mb-4">Premium Plan</h3>
                    <p class="text-4xl font-bold text-gray-800 mb-2">$30<span class="text-lg font-normal text-gray-500">/month</span></p>
                    <p class="text-gray-600 mb-6 h-20">All Standard features, plus personalized coaching and advanced workshops.</p>
                    <ul class="space-y-2 text-gray-700 mb-8">
                        <li class="flex items-center"><svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>All Standard features</li>
                        <li class="flex items-center"><svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>Personalized coaching</li>
                        <li class="flex items-center"><svg class="w-5 h-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>Advanced workshops</li>
                    </ul>
                    <button data-plan-name="Premium Plan" data-plan-type="Monthly" data-plan-price="$30" class="select-plan-btn w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-300">Sign Up Now (Monthly)</button>
                    <button data-plan-name="Premium Plan" data-plan-type="Annual" data-plan-price="$300" class="select-plan-btn w-full mt-2 bg-blue-400 hover:bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-300">Sign Up Now (Annual - Save $60)</button>
                </div>
            </div>
        </section>

        <!-- Sign Up & Billing Page (Combined) -->
        <section id="signup-billing-page" class="page-section hidden">
            <div class="max-w-2xl mx-auto bg-white p-8 md:p-12 rounded-xl shadow-2xl">
                <h2 class="text-3xl font-bold text-center text-gray-800 mb-8">Complete Your Sign Up</h2>
                
                <div id="plan-details-checkout" class="mb-8 p-6 bg-blue-50 rounded-lg border border-blue-200 text-center">
                    <!-- Selected plan details will be injected here by JS -->
                    <p class="text-gray-600">Loading selected plan...</p>
                </div>

                <form id="signup-billing-form" class="space-y-6">
                    <div>
                        <h3 class="text-xl font-semibold text-gray-700 mb-4">Account Information</h3>
                        <div>
                            <label for="email-signup" class="block text-sm font-medium text-gray-700">Email address</label>
                            <input type="email" name="email" id="email-signup" required class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="you@example.com">
                        </div>
                        <div>
                            <label for="password-signup" class="block text-sm font-medium text-gray-700 mt-4">Password</label>
                            <input type="password" name="password" id="password-signup" required class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="••••••••">
                        </div>
                    </div>

                    <div>
                        <h3 class="text-xl font-semibold text-gray-700 mb-4 mt-8">Billing Information (Mock)</h3>
                        <p class="text-sm text-gray-500 mb-4">For this prototype, billing is simulated. No real card details are processed or stored.</p>
                        <div>
                            <label for="cardName" class="block text-sm font-medium text-gray-700">Name on Card</label>
                            <input type="text" name="cardName" id="cardName" class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Full Name">
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                            <div class="md:col-span-2">
                                <label for="cardNumber" class="block text-sm font-medium text-gray-700">Card Number</label>
                                <input type="text" name="cardNumber" id="cardNumber" class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="•••• •••• •••• ••••">
                            </div>
                            <div>
                                <label for="expiry" class="block text-sm font-medium text-gray-700">Expiry (MM/YY)</label>
                                <input type="text" name="expiry" id="expiry" class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="MM/YY">
                            </div>
                            <div>
                                <label for="cvv" class="block text-sm font-medium text-gray-700">CVV</label>
                                <input type="text" name="cvv" id="cvv" class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="•••">
                            </div>
                        </div>
                    </div>
                    
                    <div class="pt-4">
                        <button type="submit" id="signup-billing-submit-btn" class="w-full flex items-center justify-center bg-green-500 hover:bg-green-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition-colors duration-300 text-lg">
                            <span class="loader hidden mr-2" id="signup-billing-loader"></span>
                            Create Account & Activate Subscription
                        </button>
                    </div>
                </form>
            </div>
        </section>

        <!-- Login Page -->
        <section id="login-page" class="page-section hidden">
            <div class="max-w-md mx-auto bg-white p-8 md:p-12 rounded-xl shadow-2xl mt-10">
                <h2 class="text-3xl font-bold text-center text-gray-800 mb-8">Login to Simplifinance</h2>
                <form id="login-form" class="space-y-6">
                    <div>
                        <label for="email-login" class="block text-sm font-medium text-gray-700">Email address</label>
                        <input type="email" name="email" id="email-login" required class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="you@example.com">
                    </div>
                    <div>
                        <label for="password-login" class="block text-sm font-medium text-gray-700">Password</label>
                        <input type="password" name="password" id="password-login" required class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="••••••••">
                    </div>
                    <div>
                        <button type="submit" id="login-submit-btn" class="w-full flex items-center justify-center bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition-colors duration-300 text-lg">
                             <span class="loader hidden mr-2" id="login-loader"></span>
                            Login
                        </button>
                    </div>
                </form>
                 <p class="mt-6 text-center text-sm text-gray-600">
                    Don't have an account? <a href="#" onclick="showPage('home-page'); return false;" class="font-medium text-blue-600 hover:text-blue-500">Sign up for a plan.</a>
                </p>
            </div>
        </section>

        <!-- Educational Library Page (Gated Content) -->
        <section id="library-page" class="page-section hidden">
            <div class="text-center mb-12">
                <h1 class="text-4xl font-bold text-gray-800 mb-4">Educational Library</h1>
                <p class="text-lg text-gray-600">Welcome! Here's your exclusive content.</p>
            </div>
            <div id="library-content-list" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Content will be loaded here by JS -->
                <p class="text-gray-500 col-span-full text-center">Loading content or please log in...</p>
            </div>
        </section>

        <!-- Admin Page (Content Upload) -->
        <section id="admin-page" class="page-section hidden">
            <div class="max-w-xl mx-auto bg-white p-8 md:p-12 rounded-xl shadow-2xl mt-10">
                <h2 class="text-3xl font-bold text-center text-gray-800 mb-8">Admin - Upload Content</h2>
                <form id="admin-upload-form" class="space-y-6">
                    <div>
                        <label for="contentTitle" class="block text-sm font-medium text-gray-700">Content Title</label>
                        <input type="text" name="contentTitle" id="contentTitle" required class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div>
                        <label for="contentDescription" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea name="contentDescription" id="contentDescription" rows="3" required class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500"></textarea>
                    </div>
                    <div>
                        <label for="contentUrl" class="block text-sm font-medium text-gray-700">Content URL (e.g., video link, article)</label>
                        <input type="url" name="contentUrl" id="contentUrl" required class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="https://example.com/resource">
                    </div>
                     <div>
                        <label for="accessLevel" class="block text-sm font-medium text-gray-700">Access Level</label>
                        <select name="accessLevel" id="accessLevel" required class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 bg-white">
                            <option value="basic">Basic</option>
                            <option value="standard">Standard</option>
                            <option value="premium">Premium</option>
                        </select>
                    </div>
                    <div>
                        <button type="submit" id="admin-upload-submit-btn" class="w-full flex items-center justify-center bg-purple-500 hover:bg-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition-colors duration-300 text-lg">
                            <span class="loader hidden mr-2" id="admin-upload-loader"></span>
                            Upload Content
                        </button>
                    </div>
                </form>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white text-center p-6 mt-12">
        <p>&copy; <span id="currentYear"></span> Simplifinance. All rights reserved. (Mock Concept)</p>
        <script>document.getElementById('currentYear').textContent = new Date().getFullYear();</script>
    </footer>

    <!-- Alert Modal -->
    <div id="alert-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center hidden z-50 p-4">
        <div class="relative mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 id="alert-modal-title" class="text-xl font-bold text-red-600 mb-4">Alert</h3>
                <div class="mt-2 px-7 py-3">
                    <p id="alert-modal-message" class="text-base text-gray-700"></p>
                </div>
                <div class="items-center px-4 py-3">
                    <button id="alert-modal-close" class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        OK
                    </button>
                </div>
            </div>
        </div>
    </div>

</body>
</html>
